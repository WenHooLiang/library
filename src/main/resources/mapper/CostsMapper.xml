<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qf.mapper.CostsMapper" >
  <resultMap id="BaseResultMap" type="com.qf.entity.Costs" >
    <id column="cost_id" property="costId" jdbcType="INTEGER" />
    <result column="reader_id" property="readerId" jdbcType="INTEGER" />
    <result column="cost_type" property="costType" jdbcType="TINYINT" />
    <result column="numeric" property="numeric" jdbcType="REAL" />
    <result column="pay_type" property="payType" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    cost_id, reader_id, cost_type, `numeric`, pay_type, create_time, is_delete
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qf.entity.CostsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tbl_costs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tbl_costs
    where cost_id = #{costId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tbl_costs
    where cost_id = #{costId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qf.entity.CostsExample" >
    delete from tbl_costs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qf.entity.Costs" >
    insert into tbl_costs (cost_id, reader_id, cost_type, 
      `numeric`, pay_type, create_time,
      is_delete)
    values (#{costId,jdbcType=INTEGER}, #{readerId,jdbcType=INTEGER}, #{costType,jdbcType=TINYINT}, 
      #{numeric,jdbcType=REAL}, #{payType,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{isDelete,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qf.entity.Costs" >
    insert into tbl_costs
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="costId != null" >
        cost_id,
      </if>
      <if test="readerId != null" >
        reader_id,
      </if>
      <if test="costType != null" >
        cost_type,
      </if>
      <if test="numeric != null" >
        `numeric`,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="costId != null" >
        #{costId,jdbcType=INTEGER},
      </if>
      <if test="readerId != null" >
        #{readerId,jdbcType=INTEGER},
      </if>
      <if test="costType != null" >
        #{costType,jdbcType=TINYINT},
      </if>
      <if test="numeric != null" >
        #{numeric,jdbcType=REAL},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qf.entity.CostsExample" resultType="java.lang.Integer" >
    select count(*) from tbl_costs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tbl_costs
    <set >
      <if test="record.costId != null" >
        cost_id = #{record.costId,jdbcType=INTEGER},
      </if>
      <if test="record.readerId != null" >
        reader_id = #{record.readerId,jdbcType=INTEGER},
      </if>
      <if test="record.costType != null" >
        cost_type = #{record.costType,jdbcType=TINYINT},
      </if>
      <if test="record.numeric != null" >
        `numeric` = #{record.numeric,jdbcType=REAL},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDelete != null" >
        is_delete = #{record.isDelete,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tbl_costs
    set cost_id = #{record.costId,jdbcType=INTEGER},
      reader_id = #{record.readerId,jdbcType=INTEGER},
      cost_type = #{record.costType,jdbcType=TINYINT},
      `numeric` = #{record.numeric,jdbcType=REAL},
      pay_type = #{record.payType,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_delete = #{record.isDelete,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qf.entity.Costs" >
    update tbl_costs
    <set >
      <if test="readerId != null" >
        reader_id = #{readerId,jdbcType=INTEGER},
      </if>
      <if test="costType != null" >
        cost_type = #{costType,jdbcType=TINYINT},
      </if>
      <if test="numeric != null" >
        `numeric` = #{numeric,jdbcType=REAL},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDelete != null" >
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
    </set>
    where cost_id = #{costId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qf.entity.Costs" >
    update tbl_costs
    set reader_id = #{readerId,jdbcType=INTEGER},
      cost_type = #{costType,jdbcType=TINYINT},
      `numeric` = #{numeric,jdbcType=REAL},
      pay_type = #{payType,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_delete = #{isDelete,jdbcType=INTEGER}
    where cost_id = #{costId,jdbcType=INTEGER}
  </update>

  <resultMap id="CostsVo" type="com.qf.entity.vo.CostsVo">
    <id column="cost_id" jdbcType="INTEGER" property="costId"/>
    <result column="cost_type" property="costType" jdbcType="TINYINT" />
    <result column="reader_id" property="readerId" jdbcType="INTEGER" />
    <result column="numeric" property="numeric" jdbcType="REAL" />
    <result column="pay_type" property="payType" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
    <association property="reader" javaType="com.qf.entity.Readers">
      <id column="reader_id" jdbcType="INTEGER" property="readerId"/>
      <result column="reader_type_id" jdbcType="INTEGER" property="readerTypeId"/>
      <result column="role_id" property="roleId" jdbcType="INTEGER" />
      <result column="reader_name" property="readerName" jdbcType="VARCHAR" />
      <result column="password" property="password" jdbcType="VARCHAR" />
      <result column="wechat" property="wechat" jdbcType="VARCHAR" />
      <result column="phone" property="phone" jdbcType="VARCHAR" />
      <result column="address" property="address" jdbcType="VARCHAR" />
      <result column="id_card" property="idCard" jdbcType="VARCHAR" />
      <result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
      <result column="sex" property="sex" jdbcType="VARCHAR" />
      <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
      <result column="expiration_time" property="expirationTime" jdbcType="TIMESTAMP" />
      <result column="state" property="state" jdbcType="VARCHAR" />
      <result column="overdue_number" property="overdueNumber" jdbcType="INTEGER" />
      <result column="reader_code" property="readerCode" jdbcType="VARCHAR" />
      <result column="session_key" property="sessionKey" jdbcType="VARCHAR" />
    </association>
  </resultMap>
  <select id="selectAllVo" resultMap="CostsVo">
    select cost_id,c.reader_id,r.reader_name,cost_type,`numeric`,pay_type,c.create_time from tbl_costs c inner join tbl_readers r on c.reader_id = r.reader_id where c.is_delete = 1
  </select>

  <select id="selectByPrimaryKeyVo" resultMap="CostsVo" parameterType="java.lang.Integer">
    select cost_id,c.reader_id,r.reader_name,cost_type,`numeric`,pay_type,c.create_time from tbl_costs c inner join tbl_readers r on c.reader_id = r.reader_id where c.cost_id=#{costId} and c.is_delete = 1
  </select>
</mapper>